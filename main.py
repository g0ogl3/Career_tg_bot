import telebot
from telebot import types
import sqlite3
import json
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

users = {}


def load_career_data():
    with open("career_data.json", "r", encoding="utf-8") as f:
        return json.load(f)

def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            age TEXT,
            mood TEXT,
            experience TEXT,
            interests TEXT
        )
    """)
    conn.commit()
    conn.close()


def save_user(user_id, age, mood, experience, interests):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, age, mood, experience, interests)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, age, mood, experience, ",".join(interests)))
    conn.commit()
    conn.close()


def get_user(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user


@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    users[chat_id] = {}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, ask_mood)

def ask_mood(message):
    chat_id = message.chat.id
    users[chat_id]["age"] = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üî• –•–æ—á—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è", "üò´ –í—ã–≥–æ—Ä–µ–ª(–∞)", "üëÄ –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
    bot.send_message(chat_id, "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=markup)
    bot.register_next_step_handler(message, ask_experience)

def ask_experience(message):
    chat_id = message.chat.id
    users[chat_id]["mood"] = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üéì –£—á—Éc—å", "üßë‚Äçüíº –†–∞–±–æ—Ç–∞—é", "üîÑ –ú–µ–Ω—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
    bot.send_message(chat_id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç?", reply_markup=markup)
    bot.register_next_step_handler(message, ask_interests)

def ask_interests(message):
    chat_id = message.chat.id
    users[chat_id]["experience"] = message.text
    bot.send_message(chat_id, "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã? –ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–∏–∑–∞–π–Ω, –≤–∏–¥–µ–æ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è)")
    bot.register_next_step_handler(message, show_recommendations)

def show_recommendations(message):
    chat_id = message.chat.id
    interests = [i.strip().lower() for i in message.text.split(",")]
    users[chat_id]["interests"] = interests

    careers = load_career_data()
    matches = []

    for career in careers:
        tags = [tag.lower() for tag in career['tags']]
        if any(interest in tags for interest in interests):
            matches.append(career)

    if not matches:
        bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ üòî, –Ω–æ —Å–∫–æ—Ä–æ –±–∞–∑–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è!")
    else:
        for career in matches:
            bot.send_message(
                chat_id,
                f"üíº *{career['title']}*\n\n{career['description']}",
                parse_mode="Markdown"
            )

    
    save_user(
        user_id=chat_id,
        age=users[chat_id]["age"],
        mood=users[chat_id]["mood"],
        experience=users[chat_id]["experience"],
        interests=interests
    )

    bot.send_message(chat_id, "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üóÇÔ∏è. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start")


@bot.message_handler(commands=['profile'])
def handle_profile(message):
    chat_id = message.chat.id
    user = get_user(chat_id)

    if not user:
        bot.send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    age, mood, experience, interests = user[1], user[2], user[3], user[4]
    profile_text = (
        f"üßæ *–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:*\n\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üí¨ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}\n"
        f"üß† –û–ø—ã—Ç: {experience}\n"
        f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    bot.send_message(chat_id, profile_text, parse_mode="Markdown", reply_markup=markup)
    bot.register_next_step_handler(message, profile_next_action)

def profile_next_action(message):
    if "–æ–±–Ω–æ–≤–∏—Ç—å" in message.text.lower():
        send_welcome(message)
    else:
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–ø–∏—à–∏ /start.")


if __name__ == "__main__":
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
